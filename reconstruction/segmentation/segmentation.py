"""Segment person from RGBD images"""


from typing import List, Optional, Tuple, Union

import numpy as np
import torch
from torchvision.models.detection import (MaskRCNN_ResNet50_FPN_V2_Weights,
                                          maskrcnn_resnet50_fpn_v2)


class Segmentation:
    """Segment person using maskrcnn"""

    def __init__(self) -> None:
        self.weights = MaskRCNN_ResNet50_FPN_V2_Weights.DEFAULT
        self.transforms = self.weights.transforms()
        model = maskrcnn_resnet50_fpn_v2(weights=self.weights, progress=False)
        self.model = model.eval()

    def get_labels(self) -> List[str]:
        """Get label categories"""
        return self.weights.meta["categories"]

    def _extract(self, arr: np.ndarray, mask: np.ndarray) -> np.ndarray:
        """Extract pixels using mask
        Args:
            arr: Image
            mask: Binary mask of a peson
        Returns:
            masked image
        """
        out = np.zeros_like(arr)
        out[mask] = arr[mask, :] if arr.ndim == 3 else arr[mask]
        return out

    def segment_person(
        self,
        rgbs: List[np.ndarray],
        depths: Optional[List[np.ndarray]] = None,
        thr: float = 0.5,
    ) -> Tuple[List[np.ndarray], Union[List[np.ndarray], None]]:
        """Segment person given rgbd images
        Args:
            rgbs: List of rgb images
            depths: List of depth images
            thr: threshold for the person mask generated by the segmentation model
        Returns:
            Masked rgb and depth images
        """
        images = [self.transforms(torch.tensor(img.transpose(2, 0, 1))) for img in rgbs]
        persons, p_depths = [], []
        with torch.no_grad():
            outputs = self.model(images)
            for i, dict_ in enumerate(outputs):
                mask = (dict_["masks"][0].squeeze(0) > thr).numpy()
                persons.append(self._extract(rgbs[i], mask))
                if depths:
                    p_depths.append(self._extract(depths[i], mask))
        return persons, p_depths
